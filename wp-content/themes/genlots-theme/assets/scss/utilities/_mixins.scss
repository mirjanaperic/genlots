@mixin min-mq($var) {
  @media (min-width: #{$var}) {
    @content;
  }
}

@mixin max-mq($var) {
  @media (max-width: #{$var}) {
    @content;
  }
}

@mixin min-max-mq($min, $max) {
  @media (min-width: #{$min}) and (max-width: #{$max}) {
    @content;
  }
}

@mixin use-font($family, $weight) {
  font-family: $family;
  font-weight: $weight;
}

// Font face helper
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// font Face custom generator
@mixin font-face($name, $folder, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $path: '../../assets/fonts/';
  $src: null;
  $extmods: (
          eot: '?',
          svg: '#' + str-replace($name, ' ', '_')
  );
  $formats: (
          otf: 'opentype',
          ttf: 'truetype'
  );
  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + $folder + '/'+ $name +'.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
